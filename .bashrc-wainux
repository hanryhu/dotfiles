#!/usr/bin/env bash
######## TERMINAL CONFIG
#BEGIN better autocomplete for sudo
complete -cf sudo
#END better autocomplete for sudo
# BEGIN custom code to set prompt
export PS1="\h:\w\$ "
# End custom code to set prompt
# BEGIN suppress bash warning
export SHELL=/bin/bash
export BASH_SILENCE_DEPRECATION_WARNING=1
# End suppress bash warning
# BEGIN suppress dumb term warning
if [[ -n $INSIDE_EMACS ]]; then
    export TERM=xterm
fi

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

######## USEFUL ALIASES
# BEGIN update bashrc
alias eb="emacs ~/.bashrc"
alias sb="source ~/.bashrc"
# END update bashrc
# better which
alias which=type
# end better which
# better mv
alias mv-mv=/bin/mv
function maybe-git-mv ()
{
    local repo
    repo=$(git rev-parse --show-toplevel 2> /dev/null)
    if [[ -e "${repo}" ]]; then
	echo "Using git mv -- if you want normal mv use mv-mv";
	git mv "$@";
    else
	mv-mv "$@";
    fi
}
alias mv=maybe-git-mv
#end better mv
# better rm
alias rm-rm=/bin/rm
function maybe-git-rm ()
{
    local repo
    repo=$(git rev-parse --show-toplevel 2> /dev/null)
    if [[ -e "${repo}" ]]; then
	echo "Using git rm -- if you want normal rm use rm-rm";
	git rm "$@";
    else
	rm-rm "$@";
    fi
}
alias rm=maybe-git-rm
#end better rm
# swap two files
function swap()
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE && mv "$2" "$1" && mv $TMPFILE "$2"
}
function swap-swap()
{
    local TMPFILE=tmp.$$
    mv-mv "$1" $TMPFILE && mv-mv "$2" "$1" && mv-mv $TMPFILE "$2"
}
alias sw=swap
alias sw-sw=swap-swap
# END swap two files
# From https://stackoverflow.com/questions/12198222/go-up-several-directories-in-linux
# cd up to n dirs
# usage: up 10  up dir
function up() {
    case $1 in
        *[!0-9]*)                                          # if not a number
            echo "going up to $1"
            pushd $( pwd | sed -r "s|(.*/$1[^/]*/).*|\1|" )     # search dir_name in current path, if found - cd to it
            ;;                                               # if not found - not cd
        *)
            if [[ -z $1 ]]; then
                echo "going up"
            else
                echo "going up $1 times"
            fi
            pushd $(printf "%0.0s../" $(seq 1 $1));             # cd ../../../../  (N dirs)
            ;;
    esac
}
alias '..'=up                                # can not name function 'cd..'
# Begin ls color setup
alias ls='ls -GpF'
alias ll='ls -lh'
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
# End ls color setup
#BEGIN rb
alias rb="irb --simple-prompt"
#END rb
#BEGIN lsl
alias lsl='find . -ls -name "*~" -prune'
#END lsl
#BEGIN whoami aliases
alias whoami-test='nosetests -v ~/whoami/tests && whoami-lint'
alias whoami-lint='pycodestyle ~/whoami/whoami ~/whoami/tests ~/whoami/scripts --ignore=E501,W504'
alias whoami-run='python ~/whoami/scripts/run.py'
alias astro-test='astro && astro-lint && python -m nose2 -v'
alias ast=astro-test
alias astro-lint='pycodestyle ~/astroparse/astroparse ~/astroparse/tests --ignore=E501,W504'
elint () {
    # whoami lint
    lint_files=$(whoami-lint -q | paste -sd " " -)
    if [ -n "$lint_files" ]; then
	emacs "$@" "$lint_files"
    else
	echo "Nothing to lint in whoami! Yay :)"
    fi
    # astroparse lint
    lint_files=$(astro-lint -q | paste -sd " " -)
    if [ -n "$lint_files" ]; then
	emacs "$@" "$lint_files"
    else
	echo "Nothing to lint in astroparse! Yay :)"
    fi
}
autolint () {
    # whoami lint
    lint_files=$(whoami-lint -q | paste -sd " " -)
    if [ -n "$lint_files" ]; then
	autopep8 --in-place --ignore=E501,W504 "$@" "$lint_files"
    else
	echo "Nothing to lint in whoami! Yay :)"
    fi
    # astroparse lint
    lint_files=$(astro-lint -q | paste -sd " " -)
    if [ -n "$lint_files" ]; then
	autopep8 --in-place --ignore=E501,W504 "$@" "$lint_files"
    else
	echo "Nothing to lint in astroparse! Yay :)"
    fi
}
alias ai='astro; astroparse-interactive -vsop'
alias aib='astrob; astroparse-interactive -vsop'
alias ts='astro; astroparse-try-parsers'
alias tsb='astrob; astroparse-try-parsers'
alias rlwrap-ai='astro; rlwrap astroparse-interactive -vsop'
alias rlwrap-ts='astro; rlwrap astroparse-try-parsers'
function astro () {
    cd ~/astroparse || return
    workon astro
}
function astrob () {
    # astro-backup
    cd ~/astroparse2 || return
    workon astrob
}
function astro3 () {
    workon astro3 && rmvirtualenv astro && cpvirtualenv astro3 astro && astro
}
function astro2 () {
    workon astro2 && rmvirtualenv astro && cpvirtualenv astro2 astro && astro
}
#END whoami aliases
########### GIT TOOLS
#BEGIN git auto-complete (https://apple.stackexchange.com/questions/55875/git-auto-complete-for-branches-at-the-command-line)
test -f ~/.git-completion.bash && . "$_"
#END git auto-complete
alias q="echo 'nothing to quit :)'"
#BEGIN use emacs to open all affected files in a git diff
ediff () {
    emacs "$(git diff --name-only $@ | paste -sd " " -)"
}
#END use emacs to open all affected files in a git diff
#BEGIN analyze-history
analyze-history () {
    history|awk '{print $2, $3}'|awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c|sort -nr|less
}
#END analyze-history
#BEGIN git aliases
alias gs='git status'
function git-log-title-body-only () {
    git log --format='%Cgreen%s%n%Creset%b'
}
alias gltbo=git-log-title-body-only
# delete all merged branches
# From https://devconnected.com/how-to-clean-up-git-branches/
alias git-clean-branches='git branch --color=never --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d'
# end delete all merged branches
# Begin git cherry-pick alias
alias gcp='git cherry-pick'
# end git cherry-pick alias
# Begin git pull origin master alias
function gpom ()
{
    echo 'git pull origin master;'
    git pull origin master;
}
# end git pull origin master alias
function gfom ()
{
    echo 'git fetch origin master;'
    git fetch origin master;
}
# Begin git checkout alias
# alias go='git checkout'
alias gb='git branch'
alias gob='git checkout -b'
# end git checkout alias
alias gu="git commit --amend --no-edit"
alias gr="git add-unmerged; echo 'resolved all'"
# Ignore all files that are currently deleted, forever.
# (https://orangenarwhals.com/2020/12/fun-with-git-how-to-ignore-locally-deleted-files-in-git-status-if-youre-running-out-of-hard-drive-space/)
alias git-ignore-deleted="git ls-files --deleted -z | git update-index --assume-unchanged -z --stdin"
alias git-unignore="git update-index --no-assume-unchanged --stdin"
alias git-see-ignored="git ls-files -v | grep \"^[a-z]\" | sed 's/^[a-z] \(.*$\)/\1/'"
#END git aliases
#BEGIN pbcopy for linux
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
#END pbcopy for linux
#BEGIN snowflake scp
function sf-scp () {
    if [[ -z $2 ]] ; then
	scp henryhu@snowflake.myddns.me:"$1" "$1";
    else
	scp henryhu@snowflake.myddns.me:"$1" "$2";
    fi
}
#END snowflake scp
#BEGIN infolab ssh
function infolab() { eval "ssh -Y henryhu@$1.csail.mit.edu" ;}
alias nav='infolab navassa'
alias spr='infolab spratly'
alias wal='infolab wallis'
alias enav='emacs -f nav'
alias espr='emacs -f spr'
alias ewal='emacs -f wal'
alias esno='emacs -f sno'
alias erac='emacs -f rac'
alias eath='emacs -f ath'
alias essh='emacs -f ssh'
#END infolab ssh
#BEGIN mount file systems ssh
alias mntbaker="umount -f ~/baker; sshfs henryhu@baker:/usr/local/share/baker/staging ~/baker"
alias mntspratly="umount -f ~/spratly; sshfs henryhu@spratly.csail.mit.edu ~/spratly"
alias mntdevon="umount -f ~/devon; sshfs henryhu@devon.csail.mit.edu:/storage/henryhu ~/devon"
#END mount file systems ssh
#BEGIN unmount icecube from snowflake
alias umnticecube="diskutil unmount /Volumes/Extreme\ SSD/; diskutil unmount /Volumes/icecube/;"
#END unmount icecube from snowflake
#BEGIN check if ssh server is running
# If output is not empty, then ssh server is active.
alias check-ssh="ps -A | grep sshd"
#END check if ssh server is running
#BEGIN Check my public IP
alias check-ip="dig +short myip.opendns.com @resolver1.opendns.com"
#END Check my public IP
#BEGIN instance var slushy -- computer domain
export slushy="slushy.myddns.me"
#END instance var slushy -- computer domain
#BEGIN slushy ssh
alias slu="ssh -Y henryhu@slushy.myddns.me"
alias sno="ssh -Y henryhu@snowflake.myddns.me"
alias flo="ssh -Y racecar@flocon.myddns.me"
alias nlp="ssh ubuntu@ec2-54-88-185-120.compute-1.amazonaws.com"
#END slushy ssh
#BEGIN Shortcut for athena
function athena() {
    echo "ssh -Y athena.dialup.mit.edu;"
    ssh -Y athena.dialup.mit.edu;
}
alias a=athena
#END Shortcut for athena

# Working directory shortcut
source ~/.wd-history
# End working directory shortcut

##########################################################################
# Begin more complex functions and examples                              #
##########################################################################


function for-loop-example {
    # field separator
    IFS=$(echo -en "\n\b")
    for i in $(find .)
    do
        ffmpeg -i "$i" "$i.mp3"
    done
}

function print-betty () {
    scp "$1" spratly.csail.mit.edu:~/tmp-to-print;
    ssh spratly.csail.mit.edu "lpoptions -d betty && lp tmp-to-print"
}

function print-betty-on-host () {
    scp "$1" "$2".csail.mit.edu:~/tmp-to-print;
    ssh "$2".csail.mit.edu "lpoptions -d betty && lp tmp-to-print"
}

function concat-pdfs () {
    pdftk "$@" cat output out.pdf
    echo "Concatenated PDFs "$@" to out.pdf"
}

function pdf-booklet () {
    # Print pdf into a booklet form (4 pages per front-back page)
    echo "Follow this procedure:"
    echo "1. Print from Adobe Acrobat in booklet mode to the network printer: localhost"
    echo "2. sudo -s"
    echo "3. cd /private/var/spool/cups; ls -lrth"
    echo "4. Examine the newest file here named d#####-###"
    echo "5. You must do pstopdf d#####-###; chown henryhu *.pdf; mv *.pdf ~henryhu/Downloads;"
}

function forward-devon () {
    ssh -L 127.0.0.1:8888:127.0.0.1:8888 devon.csail.mit.edu;
}

function dtach-screen () {
    # Use dtach to manage sessions.  The issue is that it doesn't save
    # output (scrollback), so we just redirect all output.  You can
    # examine output with action out (perhaps piped into less).  You
    # can examine the tail of output with action tail.
    filename="$1"
    if [[ -z $1 ]] ; then
        filename='mydtach'
    fi
    mkdir -p /tmp/dtachsockets/
    fullfilename="/tmp/dtachsockets/$filename"
    echo "Entering dtach at $fullfilename.  To get out, use C-\."
    echo "Remember to redirect outputs to log files before detaching >> /tmp/log."
    dtach -A "$fullfilename" -r none -z bash
    # if [[ $2 == "out" ]] ; then
    #     cat "$fullfilename.out"
    # elif [[ $2 == "" ]] ; then
    #     # Existing session.  attach
    #     touch "$fullfilename.out"
    #     # dtach -A "$fullfilename" -r ctrl_l -z bash >> "$fullfilename.out" 2>&1
    # elif [[ $2 == "watch" ]] ; then
    #     # r: interpret colors (call in ansi-term or term only!)
    #     # f: Force open binary files
    #     # +F: watch for append.
    #     less -rf +F "$fullfilename.out"
    # elif [[ $2 == "tail" ]] ; then
    #     tail "$fullfilename.out"
    # else
    #     echo "Usage: dtach-screen [sessionname] [out|watch]"
    # fi
}
alias ds=dtach-screen


function fix-emacs () {
    # https://emacs.stackexchange.com/questions/21643/what-do-i-do-when-emacs-is-frozen
    pkill -SIGUSR2 emacs
    # Immediately do M-x toggle-debug-on-quit
}

##########################################################################
# Git stack (see create-and-push-pr-stack.sh)                            #
##########################################################################
alias stack-branch="git commit --allow-empty -m"
alias stack-restack="git fetch origin master; git rebase -i origin/master"
alias stack-push-f="yes | ~/stripe/zoolander/create-and-push-pr-stack.sh"

##########################################################################
# Python path setup                                                      #
##########################################################################
export WORKON_HOME=/home/henryhu/.venv/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
source /home/henryhu/.local/bin/virtualenvwrapper.sh

# For example, contains pycodestyle
export PATH="$PATH:$HOME/.local/bin"

# For some reason, this has recently been `cat`.  That's bad for `git log`, for example.
export PAGER=less


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
